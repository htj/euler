-- The sequence of triangle numbers is generated by adding the natural numbers.
-- So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.  The
-- first ten terms would be:
--
-- 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
--
-- Let us list the factors of the first seven triangle numbers:
--
-- 1: 1
-- 3: 1,3
-- 6: 1,2,3,6
-- 10: 1,2,5,10
-- 15: 1,3,5,15
-- 21: 1,3,7,21
-- 28: 1,2,4,7,14,28
--
-- We can see that 28 is the first triangle number to have over five divisors.
-- What is the value of the first triangle number to have over five hundred
-- divisors?

import Data.List
import Data.Numbers.Primes


-- only 1 is a squared number, so we can ignore that one
-- saves somes odd sqrt cases in nDivs
triangleNumbers = scanl1 (+) [1..]

nDivs :: Integer -> Int
-- naive and slow
--nDivs n = sum [ 1 | x <- [1..n], mod n x == 0 ]

-- only go to square root
--nDivs n = 2 * ( length $ filter ((==0) . mod n) [1..r] )
--    where r = round $ sqrt $ fromIntegral n

-- number of divisors based on prime factors
nDivs n = product $ map ((+1) . length) (group (primeFactors n))

result = head $ filter ((> 500) . nDivs) $ dropWhile (<500^2) triangleNumbers

main = print $ result


